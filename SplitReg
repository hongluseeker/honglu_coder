package com.qingyuan.proxy;

import org.junit.Test;

public class SplitReg
{
  /*JAVA中用于处理字符串常用的有三个类：
    java.lang.String、java.lang.StringBuffer、java.lang.StringBuilder，
    这三者的共同之处都是 final 类,不允许被继承,这主要是从性能和安全性上考虑的,因为这几个类都是经常被使用着的,且考虑到防止其中的参数被修改影响到其它的应用.
    StringBuffer 与 StringBuilder 两个基本上差不多,只是 StringBuffer 是线程安全,可以不需要额外的同步用于多线程中.
    StringBuilder 是非同步,运行于多线程中就需要使用着单独同步处理,但是速度就比 StringBuffer 快多了,二者之间的共同点都可以通过append,insert进行字符串的操作
    String 实现了三个接口：Serializable、Comparable<String>、CharSequence，
    而 StringBuffer 及 StringBuilder 只实现了两个接口 Serializable、CharSequence,相比之下 String 的实例可以通过 compareTo 方法进行比较,而其它两个就不可以*/
   /* StringBuilder：
    一个可变的字符序列,此类提供一个与 StringBuffer 兼容的 API,但不保证同步,该类被设计用作 StringBuffer 的一个简易替换,
    用在字符串缓冲区被单个线程使用的时候(这种情况很普遍)如果可能,建议优先采用该类,因为在大多数实现中,它比 StringBuffer 要快*/
    @Test
    public void testString()
    {
       StringBuilder builder = new StringBuilder("stringBuilderMethod");
       builder = new StringBuilder("stringBuilderMethod2");
       System.out.println(builder);
    }
    
    @Test
    public void testSplitReg()
    {
        // single sign as separator
        String address = "湖北省|武汉市|洪山区|珞喻路";
        // 如果以竖线为分隔符,则split的时候需要加上两个斜杠[\\|]进行转义
        String[] splitAddress = address.split("\\|");
        System.out.println(splitAddress[0] + splitAddress[1] + splitAddress[2] + splitAddress[3]);
        
        // single sign as separator
        String address2 = "湖北省*武汉市*洪山区*珞喻路";
        // 如果以※为分隔符,则split的时候需要加上两个斜杠[\\*]进行转义
        String[] splitAddress2 = address2.split("\\*");
        System.out.println(splitAddress2[0] + splitAddress2[1] + splitAddress2[2] + splitAddress2[3]);
        
        // single sign as separator
        String address3 = "湖北省.武汉市.洪山区.珞喻路";
        // 如果以点号为分隔符,则split的时候需要加上两个斜杠[\\.]进行转义
        String[] splitAddress3 = address3.split("\\.");
        System.out.println(splitAddress3[0] + splitAddress3[1] + splitAddress3[2] + splitAddress3[3]);
        
        // single sign as separator
        String address4 = "湖北省:武汉市:洪山区:珞喻路";
        // 如果以冒号为分隔符,则split的时候需要加上两个斜杠[\\：]进行转义
        String[] splitAddress4 = address4.split("\\:");
        System.out.println(splitAddress4[0] + splitAddress4[1] + splitAddress4[2] + splitAddress4[3]);
        
        // single sign as separator
        String address5 = "湖北省^武汉市^洪山区^珞喻路";
        // 如果以^<按位异或>为分隔符,则split的时候需要加上两个斜杠[\\^]进行转义
        String[] splitAddress5 = address5.split("\\^");
        System.out.println(splitAddress5[0] + splitAddress5[1] + splitAddress5[2] + splitAddress5[3]);
        
        String address6="上海@上海市@闵行区@吴中路";
        String[] splitAddress6 = address6.split("@");
        System.out.println(splitAddress6[0]+splitAddress6[1]+splitAddress6[2]+splitAddress6[3]);
       

        String address7 = "上海,上海市,闵行区,吴中路";
        String[] splitAddress7 = address7.split(",");
        System.out.println(splitAddress7[0]+splitAddress7[1]+splitAddress7[2]+splitAddress7[3]);
        
        /**
         * 多个符号作为分隔符
         * (1) split表达式,其实就是一个正则表达式: 其中 . :  *  ^ | 等5符号在正则表达式中属于一种有特殊含义的字符,比较常见 
         *     如果使用此种字符作为分隔符，必须使用转义符即\\加以转义
         * (2) 如果使用多个分隔符则需要借助 | 符号,需要转义符的仍然要加上分隔符进行处理    
         */
        String address8 = "上海^上海市@闵行区#吴中路：889号";
        String[] splitAddress8 = address8.split("\\^|@|#|\\：");
        System.out.println(splitAddress8[0]+splitAddress8[1]+splitAddress8[2]+splitAddress8[3]+splitAddress8[4]);
    }
    
}
